import numpy as np
def score_game(game_core):
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(1,101, size=(1000))
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)

def game_core_v3(number):
    count = 1
    predict = 50      # Действуем по алгоритму поиска в отсортированном массиве, деля область поиска пополам.
    step=predict//2   # Первая попытка - середина массива, дальше область поиска будет уменьшаться в два раза
    while number != predict:
        count+=1
        if number > predict: 
            predict += step
        elif number < predict: 
            predict -= step
        if step!=1:   # Чтобы алгоритм не зациклился, оставляем минимальный шаг = 1
            step=step//2
    return(count)     # Угадывать алгоритм будет за log2(100) шагов, что равно 6.64

score_game(game_core_v3)
